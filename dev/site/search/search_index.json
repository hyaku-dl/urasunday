{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ura A no-nonsense, simple and easy to use scraper for urasunday.com Github: github.com/hyaku-dl/urasunday Website: ura.hyaku.download Commissioned by @HappyPurple(Discord, Mistilteinn#4793) , owner of Ultralight Manga Translation Group . Interested in commissioning projects? Inquire through Discord( whi_ne | whinyaan.xyz#5135 ) or through e-mail( whinyaan@pm.me ). Price starts at 15 USD. To be updated, be sure to watch this repository and join the Discord Support Server . For the terms of usage and legals, visit LICENSE and terms of usage & disclaimer . Downloads Since people are looking for the download first, here you go: Follow this link , and download the appropriate executable for your machine. Features Download manga from urasunday.com , no nonsense Ad free 0% tracking and analytics Supported OSes Windows Linux Usage This section is not yet complete. Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. Prerequisites This section is not yet complete. Setup This section is not yet complete. Contributions This section is not yet complete. Known Issues and Limitations This application can not run at Mac OS as of now. Future of this project After supporting Windows, the app will be feature-freezed and will be under maintenance mode until further notice. License MIT Copyright for portions of project ura are held by [whi_ne, Github account whinee owner, 2022] as part of project hyaku , by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL , by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL , and by [whi_ne, Github account whinee owner, 2022] as part of project snippets.py . All other copyright for project ura are held by [Github Account whinee Owner, 2022]. Check the license for more details. Credits Thank you To @HappyPurple(Discord, Mistilteinn#4793) for commissioning this project. MIT Logo Massachusetts Institute of Technology (vectorized by Mysid , modified by whinee ), Public domain, via Wikimedia Commons Icons Exclamation Mark , Code Fork , Star , Group , Code , and Discord icons by Icons8 NOTE: If a reference or source material is not attributed properly or not at all, create a pull request so I can properly give credit to their respective authors.","title":"Home"},{"location":"#downloads","text":"Since people are looking for the download first, here you go: Follow this link , and download the appropriate executable for your machine.","title":"Downloads"},{"location":"#features","text":"Download manga from urasunday.com , no nonsense Ad free 0% tracking and analytics","title":"Features"},{"location":"#supported-oses","text":"Windows Linux","title":"Supported OSes"},{"location":"#usage","text":"This section is not yet complete.","title":"Usage"},{"location":"#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.","title":"Getting Started"},{"location":"#prerequisites","text":"This section is not yet complete.","title":"Prerequisites"},{"location":"#setup","text":"This section is not yet complete.","title":"Setup"},{"location":"#contributions","text":"This section is not yet complete.","title":"Contributions"},{"location":"#known-issues-and-limitations","text":"This application can not run at Mac OS as of now.","title":"Known Issues and Limitations"},{"location":"#future-of-this-project","text":"After supporting Windows, the app will be feature-freezed and will be under maintenance mode until further notice.","title":"Future of this project"},{"location":"#license","text":"","title":"License"},{"location":"#mit","text":"Copyright for portions of project ura are held by [whi_ne, Github account whinee owner, 2022] as part of project hyaku , by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL , by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL , and by [whi_ne, Github account whinee owner, 2022] as part of project snippets.py . All other copyright for project ura are held by [Github Account whinee Owner, 2022]. Check the license for more details.","title":"MIT"},{"location":"#credits","text":"","title":"Credits"},{"location":"#thank-you","text":"To @HappyPurple(Discord, Mistilteinn#4793) for commissioning this project.","title":"Thank you"},{"location":"#mit-logo","text":"Massachusetts Institute of Technology (vectorized by Mysid , modified by whinee ), Public domain, via Wikimedia Commons","title":"MIT Logo"},{"location":"#icons","text":"Exclamation Mark , Code Fork , Star , Group , Code , and Discord icons by Icons8 NOTE: If a reference or source material is not attributed properly or not at all, create a pull request so I can properly give credit to their respective authors.","title":"Icons"},{"location":"changelog/","text":"Changelog 0.0.0.0-alpha.5 Pre-release version bump. Added Loading screen for app initialization Fixed AppImages to be marked as AppImages (means that the config now goes on the config folder instead of the same directory as the AppImage) 0.0.0.0-alpha.4 Pre-release version bump. Added Initialization of configuration file 0.0.0.0-alpha.3 Pre-release version bump. Fixed vls string on ura/__init__.py to [0, 0, 0, 0, 0, 3] 0.0.0.0-alpha.2 Pre-release version bump. Fixed Unquoted __version__ string on ura/__init__.py 0.0.0.0-alpha.1 Pre-release version bump. Removed Useless imports 0.0.0.0-alpha.0 Initial release of the application","title":"Changelog"},{"location":"changelog/#0000-alpha5","text":"Pre-release version bump.","title":"0.0.0.0-alpha.5"},{"location":"changelog/#added","text":"Loading screen for app initialization","title":"Added"},{"location":"changelog/#fixed","text":"AppImages to be marked as AppImages (means that the config now goes on the config folder instead of the same directory as the AppImage)","title":"Fixed"},{"location":"changelog/#0000-alpha4","text":"Pre-release version bump.","title":"0.0.0.0-alpha.4"},{"location":"changelog/#added_1","text":"Initialization of configuration file","title":"Added"},{"location":"changelog/#0000-alpha3","text":"Pre-release version bump.","title":"0.0.0.0-alpha.3"},{"location":"changelog/#fixed_1","text":"vls string on ura/__init__.py to [0, 0, 0, 0, 0, 3]","title":"Fixed"},{"location":"changelog/#0000-alpha2","text":"Pre-release version bump.","title":"0.0.0.0-alpha.2"},{"location":"changelog/#fixed_2","text":"Unquoted __version__ string on ura/__init__.py","title":"Fixed"},{"location":"changelog/#0000-alpha1","text":"Pre-release version bump.","title":"0.0.0.0-alpha.1"},{"location":"changelog/#removed","text":"Useless imports","title":"Removed"},{"location":"changelog/#0000-alpha0","text":"Initial release of the application","title":"0.0.0.0-alpha.0"},{"location":"latest%20bump/","text":"Latest Version Bump 0.0.0.0-alpha.5 Pre-release version bump. Added Loading screen for app initialization Fixed AppImages to be marked as AppImages (means that the config now goes on the config folder instead of the same directory as the AppImage)","title":"Latest bump"},{"location":"latest%20bump/#0000-alpha5","text":"Pre-release version bump.","title":"0.0.0.0-alpha.5"},{"location":"latest%20bump/#added","text":"Loading screen for app initialization","title":"Added"},{"location":"latest%20bump/#fixed","text":"AppImages to be marked as AppImages (means that the config now goes on the config folder instead of the same directory as the AppImage)","title":"Fixed"},{"location":"latest%20commit/","text":"Latest Commit Summary This commit aims to improve the developer utilities, and bring it back to its working state. The documentation are also being improved. Changes Added Comment in the latest commit for version bumps and comments on the latest commit (this one!) pdoc .mako templates Documentation of header styles Support for installable modules for developer utilities ( dev/scripts/py/inst_mods/* ) Changed Formatted .md and .py files","title":"Latest commit"},{"location":"latest%20commit/#summary","text":"This commit aims to improve the developer utilities, and bring it back to its working state. The documentation are also being improved.","title":"Summary"},{"location":"latest%20commit/#changes","text":"","title":"Changes"},{"location":"latest%20commit/#added","text":"Comment in the latest commit for version bumps and comments on the latest commit (this one!) pdoc .mako templates Documentation of header styles Support for installable modules for developer utilities ( dev/scripts/py/inst_mods/* )","title":"Added"},{"location":"latest%20commit/#changed","text":"Formatted .md and .py files","title":"Changed"},{"location":"license/","text":"MIT LICENSE Copyright for portions of project ura are held by [whi_ne, Github account whinee owner, 2022] as part of project hyaku , by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL , by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL , and by [whi_ne, Github account whinee owner, 2022] as part of project snippets.py . All other copyright for project ura are held by [Github Account whinee Owner, 2022]. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"notes%20to%20self/","text":"Notes to Self Look, whi_ne, I have written this for you. Please, do I humbly plead you, do not ever forgot to read this before pushing changes to Github. There is also a professional version of this notes here . Versioning System Look, you have made your own versioning system based off semver 2.0.0. Use it properly. Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. If in doubt, please DO visit semver.org . Version Bump Guides ANY change in the user interface/experience SHALL induce a user version bump. ANY change in the schema shall induce a dev version bump. ANY change in the documentation SHALL NOT induce any version bump. flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0 Changelog As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Mind the human as you do with the robot. Format the changelog properly. Example format: ## 69.4.2.0 (minor bump) Sprinkle a description here. ### Added - I added a cool feature. ### Deprecated - This feature will be depracated 'cuz I can't maintain it anymore. ### Security - Fixed stuff where the anilist token is leaked to everyone using this app. Documentation The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code.","title":"Notes to self"},{"location":"notes%20to%20self/#versioning-system","text":"Look, you have made your own versioning system based off semver 2.0.0. Use it properly. Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. If in doubt, please DO visit semver.org .","title":"Versioning System"},{"location":"notes%20to%20self/#version-bump-guides","text":"ANY change in the user interface/experience SHALL induce a user version bump. ANY change in the schema shall induce a dev version bump. ANY change in the documentation SHALL NOT induce any version bump. flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0","title":"Version Bump Guides"},{"location":"notes%20to%20self/#changelog","text":"As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Mind the human as you do with the robot. Format the changelog properly. Example format: ## 69.4.2.0 (minor bump) Sprinkle a description here. ### Added - I added a cool feature. ### Deprecated - This feature will be depracated 'cuz I can't maintain it anymore. ### Security - Fixed stuff where the anilist token is leaked to everyone using this app.","title":"Changelog"},{"location":"notes%20to%20self/#documentation","text":"The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code.","title":"Documentation"},{"location":"notes/","text":"Notes Versioning System Hyaku uses modified semver. This is due to the fact that I believe that I, the developer of this app, introduces too much breaking change to the API without noticeable changes to the user interface and/or experience. And such, I have decided to use the following versioning system: Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This however does not include improvements on loading times, despite being well within the user experience umbrella, as it is considered as an optimization to the code, and the experience will be subjective. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. Anything else adheres to the semantic versioning 2.0.0 . Flowchart flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0 Technical Details version.yml The file which contains the different version formats is version.yml . Example format: ls: [0, 0, 0, 0, 0, 5] str: 0.0.0.0-alpha.5 sv: 0.0.1-alpha.5 vls vls is the list of version numbers, and corresponds to the user , dev , minor , patch , prerelease identifier , and prerelease version respectively. str str is the string representation of the version list. sv sv is the string representation of the version list, fitted awkwardly to conform with the semver. The minor and patch are raised to the power of 3 and 2 respectively, then multiplied together to form the patch version of sv . While the remaining user and dev versions are made to be the major and minor version. This is done as the minor and patch of the vls can be easily converted back through prime factorization. Bumping vlir flowchart TD A([vlir]) --> B[/idx, vls/] --> C[\"for i in range(idx + 1, len(vls))\"] C --> |iterate| D{idx == i?} D --> E{i == 4} E --> |true| F[\"vls[i] = 3\"] --> H((fa:fa-circle)) --> C E --> |false| G[\"vls[i] = 0\"] --> H C --> |finish| I[/vls/] bump flowchart TD A([bump]) --> B[/idx/] --> C{idx == 4} C --> |true| D{pi == 3} D --> |true| E[\"vls[3] += 1\"] --> F[\"vls[4] = vls[5] = 0\"] --> J[/vls/] D --> |false| G[[\"vlir(idx, vls)\"]] --> J C --> |false| H[\"vls[idx] += 1\"] --> G Changelog As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added For adding new features. user dev minor Changed For changes in existing functionality. user dev Deprecated For marking features as deprecated . patch Removed For removing features. user dev Fixed For any kind of fixes, formatting not included. Security For any attempts to fix a security vulnerability. Example format: ## 1.0.0.0-rc.1 (pre-release identifier bump) Concisely describe changes in this release. ### Added - List additions here. Developer Utilities The included developer utilities in this repository are hard to document, as it has grew to such an extent that it is naught but futile to document it all. May I never forget what I did there, and how it works, as it literally helps me get this repository out. Documentation notes to developer The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code. Headings I like to use headings to organize my documentations. However, only 4 of them are usable as h5 and h6 is much smaller than the body text. And such, I have devised a system to be able to extend the headings. # **h1** ## **h2** ### **h3** #### **h4** #### ***h5*** #### *h6* #### h7 This works when you only have up to 7 headings, however, to extend it further more, you have to use this extension technique from 1 header higher until reaching the desired number of headings as shown below: # **h1** ## **h2** ### **h3** ### ***h4*** ### *h5* ### h6 #### **h7** #### ***h8*** #### *h9* #### h10 Anyways, I want to be able to do this automatically in the future.","title":"Notes"},{"location":"notes/#versioning-system","text":"Hyaku uses modified semver. This is due to the fact that I believe that I, the developer of this app, introduces too much breaking change to the API without noticeable changes to the user interface and/or experience. And such, I have decided to use the following versioning system: Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This however does not include improvements on loading times, despite being well within the user experience umbrella, as it is considered as an optimization to the code, and the experience will be subjective. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. Anything else adheres to the semantic versioning 2.0.0 .","title":"Versioning System"},{"location":"notes/#flowchart","text":"flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0","title":"Flowchart"},{"location":"notes/#technical-details","text":"","title":"Technical Details"},{"location":"notes/#versionyml","text":"The file which contains the different version formats is version.yml . Example format: ls: [0, 0, 0, 0, 0, 5] str: 0.0.0.0-alpha.5 sv: 0.0.1-alpha.5","title":"version.yml"},{"location":"notes/#vls","text":"vls is the list of version numbers, and corresponds to the user , dev , minor , patch , prerelease identifier , and prerelease version respectively.","title":"vls"},{"location":"notes/#str","text":"str is the string representation of the version list.","title":"str"},{"location":"notes/#sv","text":"sv is the string representation of the version list, fitted awkwardly to conform with the semver. The minor and patch are raised to the power of 3 and 2 respectively, then multiplied together to form the patch version of sv . While the remaining user and dev versions are made to be the major and minor version. This is done as the minor and patch of the vls can be easily converted back through prime factorization.","title":"sv"},{"location":"notes/#bumping","text":"","title":"Bumping"},{"location":"notes/#vlir","text":"flowchart TD A([vlir]) --> B[/idx, vls/] --> C[\"for i in range(idx + 1, len(vls))\"] C --> |iterate| D{idx == i?} D --> E{i == 4} E --> |true| F[\"vls[i] = 3\"] --> H((fa:fa-circle)) --> C E --> |false| G[\"vls[i] = 0\"] --> H C --> |finish| I[/vls/]","title":"vlir"},{"location":"notes/#bump","text":"flowchart TD A([bump]) --> B[/idx/] --> C{idx == 4} C --> |true| D{pi == 3} D --> |true| E[\"vls[3] += 1\"] --> F[\"vls[4] = vls[5] = 0\"] --> J[/vls/] D --> |false| G[[\"vlir(idx, vls)\"]] --> J C --> |false| H[\"vls[idx] += 1\"] --> G","title":"bump"},{"location":"notes/#changelog","text":"As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added For adding new features. user dev minor Changed For changes in existing functionality. user dev Deprecated For marking features as deprecated . patch Removed For removing features. user dev Fixed For any kind of fixes, formatting not included. Security For any attempts to fix a security vulnerability. Example format: ## 1.0.0.0-rc.1 (pre-release identifier bump) Concisely describe changes in this release. ### Added - List additions here.","title":"Changelog"},{"location":"notes/#developer-utilities","text":"The included developer utilities in this repository are hard to document, as it has grew to such an extent that it is naught but futile to document it all. May I never forget what I did there, and how it works, as it literally helps me get this repository out.","title":"Developer Utilities"},{"location":"notes/#documentation-notes-to-developer","text":"The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code.","title":"Documentation notes to developer"},{"location":"notes/#headings","text":"I like to use headings to organize my documentations. However, only 4 of them are usable as h5 and h6 is much smaller than the body text. And such, I have devised a system to be able to extend the headings. # **h1** ## **h2** ### **h3** #### **h4** #### ***h5*** #### *h6* #### h7 This works when you only have up to 7 headings, however, to extend it further more, you have to use this extension technique from 1 header higher until reaching the desired number of headings as shown below: # **h1** ## **h2** ### **h3** ### ***h4*** ### *h5* ### h6 #### **h7** #### ***h8*** #### *h9* #### h10 Anyways, I want to be able to do this automatically in the future.","title":"Headings"},{"location":"docs/0/0/","text":"dev/raw_docs/docs/0/0 \"config\"","title":"Index"},{"location":"docs/0/0/config/","text":"Configurations Config File Config File Lookup Order of Precedence (CFLOP) Hyaku is a cross-compatible project, which means that it could be ran in different OS. There is however a lack of unity in the standardization on the location of config files in this OSes. And such, I have devised a precedence order for Hyaku's config file in different platforms. The following are the CFLOP for different OSes: flowchart TD A([CFLOP]) --> L[--config argument] L --> B{OS?} B --> |*nix| C[./hyaku.yml] subgraph <br> C --> D{\"XDG<br>CONFIG<br>HOME<br>(XCH)?\"} D --> |true| E[\"${XCH}/hyaku/config.yml\"] --> F D --> |false| F[\"~/.config/hyaku/config.yml\"] F --> G[\"~/.hyk\"] G --> H[\"/etc/xdg/hyaku/config.yml\"] H --> I[\"/etc/hyaku/config.yml\"] end B --> |Windows| J[.\\hyaku.yml] subgraph <br><br> J --> K[\"${boot drive}:\\\\<br>Users\\${username}\\<br>AppData\\Roaming\\Hyaku\\<br>config.yml\"] end Config File Format Preferred Language of Translation (PLOT) PLOT is a language preferred by the user for the lookup of translations. It uses ISO 639-1 language codes.","title":"Config"},{"location":"docs/0/0/config/#config-file","text":"","title":"Config File"},{"location":"docs/0/0/config/#config-file-lookup-order-of-precedence-cflop","text":"Hyaku is a cross-compatible project, which means that it could be ran in different OS. There is however a lack of unity in the standardization on the location of config files in this OSes. And such, I have devised a precedence order for Hyaku's config file in different platforms. The following are the CFLOP for different OSes: flowchart TD A([CFLOP]) --> L[--config argument] L --> B{OS?} B --> |*nix| C[./hyaku.yml] subgraph <br> C --> D{\"XDG<br>CONFIG<br>HOME<br>(XCH)?\"} D --> |true| E[\"${XCH}/hyaku/config.yml\"] --> F D --> |false| F[\"~/.config/hyaku/config.yml\"] F --> G[\"~/.hyk\"] G --> H[\"/etc/xdg/hyaku/config.yml\"] H --> I[\"/etc/hyaku/config.yml\"] end B --> |Windows| J[.\\hyaku.yml] subgraph <br><br> J --> K[\"${boot drive}:\\\\<br>Users\\${username}\\<br>AppData\\Roaming\\Hyaku\\<br>config.yml\"] end","title":"Config File Lookup Order of Precedence (CFLOP)"},{"location":"docs/0/0/config/#config-file-format","text":"","title":"Config File Format"},{"location":"docs/0/0/config/#preferred-language-of-translation-plot","text":"PLOT is a language preferred by the user for the lookup of translations. It uses ISO 639-1 language codes.","title":"Preferred Language of Translation (PLOT)"},{"location":"docs/0/0/setup/","text":"Setup flowchart LR A([Config]) --> B[Grab CFLOP] B --> C{Last item} C --> |false| D{File exists?} D --> |true| E([Read config file]) D --> |false| C C --> |true| F{OS?} F --> |Windows| G[Initialize config file<br>at first lookup path] --> E F --> |*nix| H{.AppImage?} H --> |true| I[Initialize config file<br>at second lookup path] --> E H --> |false| G","title":"Setup"},{"location":"docs/0/0/structure/","text":"ura's Structure ura is a very basic application, yet it grew to a large size. As a one-man army, it is necessary for me to write this, as to not get lost in this chaos that I have created. I, however, procrastinated in writing this, and thus, is completely empty at the moment.","title":"Structure"},{"location":"docs/0/0/api/","text":"ura Sub-modules ura.gui ura.src","title":"ura"},{"location":"docs/0/0/api/#ura","text":"","title":"ura"},{"location":"docs/0/0/api/#sub-modules","text":"ura.gui ura.src","title":"Sub-modules"},{"location":"docs/0/0/api/gui/","text":"Module ura.gui Functions connect(sid, environ) : connect_error(data) : disconnect(sid) : Classes Exp() : ### Methods config(sid, *args, **kwargs) : dl(sid, url) : write_config(sid, stg, value) :","title":"Gui"},{"location":"docs/0/0/api/gui/#module-uragui","text":"","title":"Module ura.gui"},{"location":"docs/0/0/api/gui/#functions","text":"connect(sid, environ) : connect_error(data) : disconnect(sid) :","title":"Functions"},{"location":"docs/0/0/api/gui/#classes","text":"Exp() : ### Methods config(sid, *args, **kwargs) : dl(sid, url) : write_config(sid, stg, value) :","title":"Classes"},{"location":"docs/0/0/api/src/","text":"ura.src Super-module ura Sub-modules ura.src.base ura.src.cli ura.src.download ura.src.globals ura.src.init ura.src.settings ura.src.style ura.src.utils","title":"ura.src"},{"location":"docs/0/0/api/src/#urasrc","text":"","title":"ura.src"},{"location":"docs/0/0/api/src/#super-module","text":"ura","title":"Super-module"},{"location":"docs/0/0/api/src/#sub-modules","text":"ura.src.base ura.src.cli ura.src.download ura.src.globals ura.src.init ura.src.settings ura.src.style ura.src.utils","title":"Sub-modules"},{"location":"docs/0/0/api/src/base/","text":"Module ura.src.base Functions class_usi(dict_usi: dict[str, int]) : From the given key-value pairs of slug name and slug index, return a class with attributes for each slug, passed to url_slug_idx. Args: dict_usi (dict[str, int]): The dictionary to get the slug name-index pairs from. Returns: A class. soup(url: str, req: Type[ura.src.base.req] = ura.src.base.req, method: str = 'get', **kwargs: Dict[str, Any]) \u2011> bs4.BeautifulSoup : Returns a soup from the given url. Args: url (str): URL to get the soup from. req (Type[req], optional): Object to call the methods from. Defaults to req. Returns: BeautifulSoup: the soup urel_fn(url: str) \u2011> str : Turn an absolute URL to a relative one. If the given URL is already a relative one, a URL object from the url will be returned. Args: url (str): The URL to turn into a relative one. Returns: str: The relative URL. url_slug_idx(idx: int) \u2011> Callable[[str], str] : From an index, get the slug from a URL whether it is a relative or an an absolute URL. Args: idx (int): The index of the slug from. Returns: callable[[str], str]: Method to input the URL to and get the slug. Classes req() : ### Class variables `delete` : `get` : `head` : `options` : `patch` : `post` : `put` : r() : ### Class variables `delete` : `get` : `head` : `options` : `patch` : `post` : `put` :","title":"Base"},{"location":"docs/0/0/api/src/base/#module-urasrcbase","text":"","title":"Module ura.src.base"},{"location":"docs/0/0/api/src/base/#functions","text":"class_usi(dict_usi: dict[str, int]) : From the given key-value pairs of slug name and slug index, return a class with attributes for each slug, passed to url_slug_idx. Args: dict_usi (dict[str, int]): The dictionary to get the slug name-index pairs from. Returns: A class. soup(url: str, req: Type[ura.src.base.req] = ura.src.base.req, method: str = 'get', **kwargs: Dict[str, Any]) \u2011> bs4.BeautifulSoup : Returns a soup from the given url. Args: url (str): URL to get the soup from. req (Type[req], optional): Object to call the methods from. Defaults to req. Returns: BeautifulSoup: the soup urel_fn(url: str) \u2011> str : Turn an absolute URL to a relative one. If the given URL is already a relative one, a URL object from the url will be returned. Args: url (str): The URL to turn into a relative one. Returns: str: The relative URL. url_slug_idx(idx: int) \u2011> Callable[[str], str] : From an index, get the slug from a URL whether it is a relative or an an absolute URL. Args: idx (int): The index of the slug from. Returns: callable[[str], str]: Method to input the URL to and get the slug.","title":"Functions"},{"location":"docs/0/0/api/src/base/#classes","text":"req() : ### Class variables `delete` : `get` : `head` : `options` : `patch` : `post` : `put` : r() : ### Class variables `delete` : `get` : `head` : `options` : `patch` : `post` : `put` :","title":"Classes"},{"location":"docs/0/0/api/src/cli/","text":"Module ura.src.cli Functions cao(group: <function group at 0x7f11864053f0>, cmd: str) \u2011> List[Callable[[Callable[[Any], Any]], Callable[[Any], Any]]] : Retruns wrappers for a click command evaluated from the given arguments. Args: group (click.group): Command group of the command to be under. cmd (str): Name of the command. Returns: List[Callable[[Callable[[Any], Any]], Callable[[Any], Any]]]: The wrappers. command(group: <function group at 0x7f11864053f0>) \u2011> Callable[[Callable[[Any], Any]], Callable[[Any], Any]] : Wrapper for click commands. Args: group (click.group): Command group of the command to be under. Returns: Callable[[Callable[[Any], Any]], Callable[[Any], Any]] fn_log(lvl: int) :","title":"Cli"},{"location":"docs/0/0/api/src/cli/#module-urasrccli","text":"","title":"Module ura.src.cli"},{"location":"docs/0/0/api/src/cli/#functions","text":"cao(group: <function group at 0x7f11864053f0>, cmd: str) \u2011> List[Callable[[Callable[[Any], Any]], Callable[[Any], Any]]] : Retruns wrappers for a click command evaluated from the given arguments. Args: group (click.group): Command group of the command to be under. cmd (str): Name of the command. Returns: List[Callable[[Callable[[Any], Any]], Callable[[Any], Any]]]: The wrappers. command(group: <function group at 0x7f11864053f0>) \u2011> Callable[[Callable[[Any], Any]], Callable[[Any], Any]] : Wrapper for click commands. Args: group (click.group): Command group of the command to be under. Returns: Callable[[Callable[[Any], Any]], Callable[[Any], Any]] fn_log(lvl: int) :","title":"Functions"},{"location":"docs/0/0/api/src/download/","text":"Module ura.src.download Functions cr(rs: str) \u2011> Callable[[int], bool] : Returns a function that checks if the given int is within the range or not. The range is calculated from the given string. Args: rs (str): The range string where the range is calculated from. Returns: Callable[[int], bool]: The function that checks if the given int is within the range or not. get_extension(filename: str) \u2011> str : Get the file extension of a file from the given filename. Args: filename (str): The filename to get the file extension from. Returns: str: The file extension from the given filename. ordinal(n: int) \u2011> str : Convert the given number to ordinal number. Args: n (int): The number to convert into ordinal number. Returns: str: The said ordinal number. sanitize_filename(filename: str) \u2011> str : Sanitize the given filename. Args: filename (str): The filename to be sanitized. Returns: str: Sanitized filename. Classes DownloadFailed(*args, **kwargs) : Common base class for all non-exit exceptions. ### Ancestors (in MRO) * builtins.Exception * builtins.BaseException Downloader(directory: str = None, overwrite: bool = None, **kwargs: Dict[str, Any]) : ### Methods dlch(self, url: str) : dlf(self, file: List[str]) \u2011> None : Individual image downloader. Args: file (str): List containing the filename and the url of the file.","title":"Download"},{"location":"docs/0/0/api/src/download/#module-urasrcdownload","text":"","title":"Module ura.src.download"},{"location":"docs/0/0/api/src/download/#functions","text":"cr(rs: str) \u2011> Callable[[int], bool] : Returns a function that checks if the given int is within the range or not. The range is calculated from the given string. Args: rs (str): The range string where the range is calculated from. Returns: Callable[[int], bool]: The function that checks if the given int is within the range or not. get_extension(filename: str) \u2011> str : Get the file extension of a file from the given filename. Args: filename (str): The filename to get the file extension from. Returns: str: The file extension from the given filename. ordinal(n: int) \u2011> str : Convert the given number to ordinal number. Args: n (int): The number to convert into ordinal number. Returns: str: The said ordinal number. sanitize_filename(filename: str) \u2011> str : Sanitize the given filename. Args: filename (str): The filename to be sanitized. Returns: str: Sanitized filename.","title":"Functions"},{"location":"docs/0/0/api/src/download/#classes","text":"DownloadFailed(*args, **kwargs) : Common base class for all non-exit exceptions. ### Ancestors (in MRO) * builtins.Exception * builtins.BaseException Downloader(directory: str = None, overwrite: bool = None, **kwargs: Dict[str, Any]) : ### Methods dlch(self, url: str) : dlf(self, file: List[str]) \u2011> None : Individual image downloader. Args: file (str): List containing the filename and the url of the file.","title":"Classes"},{"location":"docs/0/0/api/src/globals/","text":"Module ura.src.globals","title":"Globals"},{"location":"docs/0/0/api/src/globals/#module-urasrcglobals","text":"","title":"Module ura.src.globals"},{"location":"docs/0/0/api/src/init/","text":"Module ura.src.init Functions init(idx: int) \u2011> None :","title":"Init"},{"location":"docs/0/0/api/src/init/#module-urasrcinit","text":"","title":"Module ura.src.init"},{"location":"docs/0/0/api/src/init/#functions","text":"init(idx: int) \u2011> None :","title":"Functions"},{"location":"docs/0/0/api/src/settings/","text":"Module ura.src.settings Functions cfg(sstg) \u2011> Any : cfg_path() \u2011> str : readcfg(file: str) \u2011> Any : Read the contents of a file with the given file name. Args: file (str): File name of the file to read the contents of. Returns: Any: The contents of the file. stg(stg: str, file: str = '/home/whine/whi_ne/3/projects/personal/tools/urasunday/ura/src/stg.json') \u2011> Any : Retrieve dictionary value of the config file with the given file name using recursive indexing with a string. ex.: Given that settings.json contains: {\"data\": {\"attr\": {\"ch\": 1}}} stg(\"data/attr/ch\", \"settings.json\") will return 1 Args: stg (str): Directory of the value to be retrieved. file (str, optional): File name of the file to get the value from. Defaults to `path.join(dn(ap(__file__)), \"settings.json\")`. Returns: Any: The retrieved value. wr_cfg(sstg, value) \u2011> Any : wr_stg(stg: str, value: Any, file: str = '/home/whine/whi_ne/3/projects/personal/tools/urasunday/ura/src/stg.json') \u2011> None : Rewrite dictionary value of the config file with the given file name using recursive indexing with a string. ex.: Given that settings.json contains: {\"data\": {\"attr\": {\"ch\": 1}}} wr_stg(\"data/attr/ch\", 2) will rewrite settings.json to be: {\"data\": {\"attr\": {\"ch\": 2}}} Args: stg (str): Directory of the value to be rewrited. value (Any): Value to rewrite to. file (str, optional): File name of the file to rewrite the value from. Defaults to path.join(dn(ap(__file__)), \"settings.json\"). Raises: FileNotFoundError: Raised if the file is not found.","title":"Settings"},{"location":"docs/0/0/api/src/settings/#module-urasrcsettings","text":"","title":"Module ura.src.settings"},{"location":"docs/0/0/api/src/settings/#functions","text":"cfg(sstg) \u2011> Any : cfg_path() \u2011> str : readcfg(file: str) \u2011> Any : Read the contents of a file with the given file name. Args: file (str): File name of the file to read the contents of. Returns: Any: The contents of the file. stg(stg: str, file: str = '/home/whine/whi_ne/3/projects/personal/tools/urasunday/ura/src/stg.json') \u2011> Any : Retrieve dictionary value of the config file with the given file name using recursive indexing with a string. ex.: Given that settings.json contains: {\"data\": {\"attr\": {\"ch\": 1}}} stg(\"data/attr/ch\", \"settings.json\") will return 1 Args: stg (str): Directory of the value to be retrieved. file (str, optional): File name of the file to get the value from. Defaults to `path.join(dn(ap(__file__)), \"settings.json\")`. Returns: Any: The retrieved value. wr_cfg(sstg, value) \u2011> Any : wr_stg(stg: str, value: Any, file: str = '/home/whine/whi_ne/3/projects/personal/tools/urasunday/ura/src/stg.json') \u2011> None : Rewrite dictionary value of the config file with the given file name using recursive indexing with a string. ex.: Given that settings.json contains: {\"data\": {\"attr\": {\"ch\": 1}}} wr_stg(\"data/attr/ch\", 2) will rewrite settings.json to be: {\"data\": {\"attr\": {\"ch\": 2}}} Args: stg (str): Directory of the value to be rewrited. value (Any): Value to rewrite to. file (str, optional): File name of the file to rewrite the value from. Defaults to path.join(dn(ap(__file__)), \"settings.json\"). Raises: FileNotFoundError: Raised if the file is not found.","title":"Functions"},{"location":"docs/0/0/api/src/style/","text":"Module ura.src.style Functions pp(t: Any) : Classes C() : ### Class variables `h0` : `h1` : `h2` : `s0` : `s1` : `s2` : S() : ### Class variables `p0` : `p1` : `t0` : `t1` : `t2` : `t_critical` : `t_error` : `t_warning` : ct() : ### Methods group(*ls: list[typing.Any]) \u2011> rich.console.Group : table(cols: list[str], rows: list[list[str]]) :","title":"Style"},{"location":"docs/0/0/api/src/style/#module-urasrcstyle","text":"","title":"Module ura.src.style"},{"location":"docs/0/0/api/src/style/#functions","text":"pp(t: Any) :","title":"Functions"},{"location":"docs/0/0/api/src/style/#classes","text":"C() : ### Class variables `h0` : `h1` : `h2` : `s0` : `s1` : `s2` : S() : ### Class variables `p0` : `p1` : `t0` : `t1` : `t2` : `t_critical` : `t_error` : `t_warning` : ct() : ### Methods group(*ls: list[typing.Any]) \u2011> rich.console.Group : table(cols: list[str], rows: list[list[str]]) :","title":"Classes"},{"location":"docs/0/0/api/src/utils/","text":"Module ura.src.utils Functions dd(default: dict[typing.Any, typing.Any], d: dict[typing.Any, typing.Any] | None) \u2011> dict[typing.Any, typing.Any] : Defaults dictionary. Overwrite the items in the default dict with the items in the d dict. Args: default (Dict[Any, Any]): The dict to rewrite the items to. d (Union[Dict[Any, Any], None]): The dict to rewrite the items from. Returns: dict[Any, Any] ddir(d: dict[typing.Any, typing.Any], dir: str, de: Any = {}) \u2011> Any : Retrieve dictionary value using recursive indexing with a string. ex.: ddir({\"data\": {\"attr\": {\"ch\": 1}}}, \"data/attr/ch\") will return 1 Args: dict (dict): Dictionary to retrieve the value from. dir (str): Directory of the value to be retrieved. Returns: op (Any): Retrieved value. de(a: Any, d: Any) \u2011> Any : Defaults. Return a if a is True, else returns d. Args: a (Any): Object to be tested, will be returned if evaluates to True. d (Any): Default object to be returned if `a` evaluates to False. Returns: Any dnrp(file: str, n: int = 1) \u2011> str : Get the directory component of a pathname by n times recursively then return it. Args: file (str): File to get the directory of. n (int, optional): Number of times to get up the directory???? Defaults to 1. Returns: op (str): The directory component got recursively by n times from the given pathname dpop(d: dict[typing.Any, typing.Any], pop: list[int | tuple[str | int | tuple] | str], de: Any = None) \u2011> Any : Iterate through the preferred order of precedence ( pop ) and see if the value exists in the dictionary. If it does, return it. If not, return de . Args: d (Dict[Any, Any]): Dictionary to retrieve the value from. pop (list[int | tuple[str | int | tuple] | str]): List of keys to iterate through. de (Any, optional): Default object to be returned. Defaults to None. Returns: Any: Retrieved value. dt(dt: str, format: str) \u2011> str : Remove timezone from datetime and format it to ISO 8601 format. Args: dt (str): Unformatted datetime string to be formatted to ISO 8601 format format (str): The initial format of the datetime string Returns: str: Formatted datetime string dt_ts(ts: str) \u2011> str : Convert the given unix timestamp to ISO 8601 format. Args: ts (str): unix timestamp to be converted to ISO 8601 format Returns: str: Formatted datetime string le(expr: str) \u2011> Any : sanitize_text(s: str) :","title":"Utils"},{"location":"docs/0/0/api/src/utils/#module-urasrcutils","text":"","title":"Module ura.src.utils"},{"location":"docs/0/0/api/src/utils/#functions","text":"dd(default: dict[typing.Any, typing.Any], d: dict[typing.Any, typing.Any] | None) \u2011> dict[typing.Any, typing.Any] : Defaults dictionary. Overwrite the items in the default dict with the items in the d dict. Args: default (Dict[Any, Any]): The dict to rewrite the items to. d (Union[Dict[Any, Any], None]): The dict to rewrite the items from. Returns: dict[Any, Any] ddir(d: dict[typing.Any, typing.Any], dir: str, de: Any = {}) \u2011> Any : Retrieve dictionary value using recursive indexing with a string. ex.: ddir({\"data\": {\"attr\": {\"ch\": 1}}}, \"data/attr/ch\") will return 1 Args: dict (dict): Dictionary to retrieve the value from. dir (str): Directory of the value to be retrieved. Returns: op (Any): Retrieved value. de(a: Any, d: Any) \u2011> Any : Defaults. Return a if a is True, else returns d. Args: a (Any): Object to be tested, will be returned if evaluates to True. d (Any): Default object to be returned if `a` evaluates to False. Returns: Any dnrp(file: str, n: int = 1) \u2011> str : Get the directory component of a pathname by n times recursively then return it. Args: file (str): File to get the directory of. n (int, optional): Number of times to get up the directory???? Defaults to 1. Returns: op (str): The directory component got recursively by n times from the given pathname dpop(d: dict[typing.Any, typing.Any], pop: list[int | tuple[str | int | tuple] | str], de: Any = None) \u2011> Any : Iterate through the preferred order of precedence ( pop ) and see if the value exists in the dictionary. If it does, return it. If not, return de . Args: d (Dict[Any, Any]): Dictionary to retrieve the value from. pop (list[int | tuple[str | int | tuple] | str]): List of keys to iterate through. de (Any, optional): Default object to be returned. Defaults to None. Returns: Any: Retrieved value. dt(dt: str, format: str) \u2011> str : Remove timezone from datetime and format it to ISO 8601 format. Args: dt (str): Unformatted datetime string to be formatted to ISO 8601 format format (str): The initial format of the datetime string Returns: str: Formatted datetime string dt_ts(ts: str) \u2011> str : Convert the given unix timestamp to ISO 8601 format. Args: ts (str): unix timestamp to be converted to ISO 8601 format Returns: str: Formatted datetime string le(expr: str) \u2011> Any : sanitize_text(s: str) :","title":"Functions"}]}