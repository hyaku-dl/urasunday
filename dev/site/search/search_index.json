{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ura A no-nonsense, simple and easy to use scraper for urasunday.com Github: github.com/hyaku-dl/urasunday Website: ura.hyaku.download What's this? Commissioned by @HappyPurple(Discord, Mistilteinn#4793) , owner of Ultralight Manga Translation Group . Interested in commissioning projects? Inquire through Discord( whi_ne | whinyaan.xyz#5135 ) or through e-mail( whinyaan@pm.me ). Price starts at 15 USD. To be updated, be sure to watch this repository and join the Discord Support Server . For the terms of usage and legals, visit LICENSE and terms of usage & disclaimer . Important This app is currently has reached the rc phase! If you can spare some time and effort, please consider testing the app and reporting the bugs you find either through raising a new Github issue or through the Discord Support Server . Any suggestions are also welcome! Thank you to everyone who supported this app from the very beginning. I, the developer of this app, will now go back to the real world, to go schooling. So yeah... no more time for this pointless stuff. sed :/ Downloads Since people are looking for the download first, here you go: Follow this link , and download the appropriate executable for your machine. Features Download manga from urasunday.com , no nonsense Ad free 0% tracking and analytics Supported OSes Windows Linux Usage This section is not yet complete. Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. Prerequisites This section is not yet complete. Click downwards arrow for more details. In the future, I plan to add specific instructions on how to install dependencies and check if it is installed in your machine. Contributions This section is not yet complete. Known Issues and Limitations This application can not run at Mac OS as of now. Future of this project After beta testing, the app will be feature-freezed and will be under maintenance mode until further notice. License MIT Copyright for portions of project ura are held by [whi_ne, Github account whinee owner, 2022] as part of project hyaku , by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL , by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL , and by [whi_ne, Github account whinee owner, 2022] as part of project snippets.py . All other copyright for project ura are held by [Github Account whinee Owner, 2022]. Check the license for more details. Credits Thank you To @HappyPurple(Discord, Mistilteinn#4793) for commissioning this project. MIT Logo Massachusetts Institute of Technology (vectorized by Mysid , modified by whinee ), Public domain, via Wikimedia Commons Icons Exclamation Mark , Code Fork , Star , Group , Code , and Discord icons by Icons8 NOTE: If a reference or source material is not attributed properly or not at all, create a pull request so I can properly give credit to their respective authors. Further Reading Frequently Asked Questions License Agreement Latest Documentation (0.0.x.x) Changelog Latest Bump Latest Commit Notes for whi~nyaan!","title":"Home"},{"location":"#whats-this","text":"Commissioned by @HappyPurple(Discord, Mistilteinn#4793) , owner of Ultralight Manga Translation Group . Interested in commissioning projects? Inquire through Discord( whi_ne | whinyaan.xyz#5135 ) or through e-mail( whinyaan@pm.me ). Price starts at 15 USD. To be updated, be sure to watch this repository and join the Discord Support Server . For the terms of usage and legals, visit LICENSE and terms of usage & disclaimer .","title":"What's this?"},{"location":"#important","text":"This app is currently has reached the rc phase! If you can spare some time and effort, please consider testing the app and reporting the bugs you find either through raising a new Github issue or through the Discord Support Server . Any suggestions are also welcome! Thank you to everyone who supported this app from the very beginning. I, the developer of this app, will now go back to the real world, to go schooling. So yeah... no more time for this pointless stuff. sed :/","title":"Important"},{"location":"#downloads","text":"Since people are looking for the download first, here you go: Follow this link , and download the appropriate executable for your machine.","title":"Downloads"},{"location":"#features","text":"Download manga from urasunday.com , no nonsense Ad free 0% tracking and analytics","title":"Features"},{"location":"#supported-oses","text":"Windows Linux","title":"Supported OSes"},{"location":"#usage","text":"This section is not yet complete.","title":"Usage"},{"location":"#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.","title":"Getting Started"},{"location":"#prerequisites","text":"This section is not yet complete. Click downwards arrow for more details. In the future, I plan to add specific instructions on how to install dependencies and check if it is installed in your machine.","title":"Prerequisites"},{"location":"#contributions","text":"This section is not yet complete.","title":"Contributions"},{"location":"#known-issues-and-limitations","text":"This application can not run at Mac OS as of now.","title":"Known Issues and Limitations"},{"location":"#future-of-this-project","text":"After beta testing, the app will be feature-freezed and will be under maintenance mode until further notice.","title":"Future of this project"},{"location":"#license","text":"","title":"License"},{"location":"#mit","text":"Copyright for portions of project ura are held by [whi_ne, Github account whinee owner, 2022] as part of project hyaku , by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL , by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL , and by [whi_ne, Github account whinee owner, 2022] as part of project snippets.py . All other copyright for project ura are held by [Github Account whinee Owner, 2022]. Check the license for more details.","title":"MIT"},{"location":"#credits","text":"","title":"Credits"},{"location":"#thank-you","text":"To @HappyPurple(Discord, Mistilteinn#4793) for commissioning this project.","title":"Thank you"},{"location":"#mit-logo","text":"Massachusetts Institute of Technology (vectorized by Mysid , modified by whinee ), Public domain, via Wikimedia Commons","title":"MIT Logo"},{"location":"#icons","text":"Exclamation Mark , Code Fork , Star , Group , Code , and Discord icons by Icons8 NOTE: If a reference or source material is not attributed properly or not at all, create a pull request so I can properly give credit to their respective authors.","title":"Icons"},{"location":"#further-reading","text":"Frequently Asked Questions License Agreement Latest Documentation (0.0.x.x) Changelog Latest Bump Latest Commit Notes for whi~nyaan!","title":"Further Reading"},{"location":"changelog/","text":"Changelog 0.0.0.0-rc.0 Added -on / --overwrite_not , -op / --overwrite_prompt , and -opn / --overwrite_prompt_not flags for the dl subcommand. Added -on / --overwrite_not , -op / --overwrite_prompt , and -opn / --overwrite_prompt_not flags for the dl subcommand. Changed Made the app log the log path even when loading, so that the user will know where to find the said file when it gets stuck while loading. .AppImage so that you can run the cli by appending the cli subcommand to the command for running the said AppImage. For example, ./ura.AppImage cli [flags] . Fixed overwrite settings not being followed (i.e. overwrite set to False, yet the chapter that is already downloaded is being overwritten). Once and for all, the fucking python imports, for fuck's sake. Improved documentation! 0.0.0.0-beta.1 Added Dynamic version and copyright information Added Dynamic version and copyright information Changed Improved logging Fixed Incorrect python library importing that causes the app to crash outright 0.0.0.0-beta.0 YANKED! Added Icon for .AppImage distribution of that app Logging information to help debug the application The app now reflects changes made on the configuration file on the app Changed Improved loading of the app, so that when the loading page is removed, the app is totally usable Uses parts of private project ( whinee/snippets.py ) for the configuration of the app, and others 0.0.0.0-alpha.5 Added Loading screen for app initialization Added Loading screen for app initialization Fixed AppImages to be marked as AppImages (means that the config now goes on the config folder instead of the same directory as the AppImage) 0.0.0.0-alpha.4 YANKED! Added Initialization of configuration file 0.0.0.0-alpha.3 YANKED! Fixed vls string on ura/__init__.py to [0, 0, 0, 0, 0, 3] 0.0.0.0-alpha.2 YANKED! Fixed Unquoted __version__ string on ura/__init__.py 0.0.0.0-alpha.1 Removed Useless imports 0.0.0.0-alpha.0","title":"Changelog"},{"location":"changelog/#added","text":"-on / --overwrite_not , -op / --overwrite_prompt , and -opn / --overwrite_prompt_not flags for the dl subcommand.","title":"Added"},{"location":"changelog/#added_1","text":"Dynamic version and copyright information","title":"Added"},{"location":"changelog/#added_2","text":"Loading screen for app initialization","title":"Added"},{"location":"faq/","text":"FAQ Is this application safe? TL;DR: First of all, safe from what aspect, bruv? Considering that you are asking this, probably not. Am I safe from authorities? TL;DR: No, what you are doing right now most probably is illegal. Really, you're asking me this? To be fair, it is a genuine concern. But like, assuming that you are 2-4 links deep on this website that only appeals to animanga pirates alike, you probably know what you are doing. Right? Right? Okay, right. This is an FAQ, and I have to answer it... Fine... Look, you're not, and you will never be. They are watching your every move. Read the legalese of the app from here Please be careful out there, kind stranger. I'm not (last line written by Github Copilot). Is this application safe for my computer? TL;DR: Yes, but not really. Safe enough to put a 99.99% safety guarantee on it, air commercials of it, and not get sued on the grounds of false advertisement. No software is ever safe, and there will never be. Unless if we, for some mysterious and divine reason, gain the ability to prove if a program halts or not, which in this universe is impossible (relevant link: Halting problem ). Enough of explaining the philosophical implications of this problematic question, and let us go to the real meat of the discussion. No, I can not assure you, as the developer of this application, that this application is safe. It is like asking if I poisoned your food; regardless of if I did it or not, I will dutifully deny the allegation, duh. Make of that what you will, but I am here to chase clout and make money out of it, not to compromise machines. Well, with all that said, I also made it for personal use. And for that, I have to make it at the very least usable to the extent that it would not compromise the host machine that it is running on. Don't trust me? The application is open-sourced. Every packaged application downloaded from the official site and Github repository is built from the same source as available on the official Github repository. If you know how to read the source code, you are free to do so, and inspect it. If you did do so, please hunt down some bugs for me. They haunt me at night, whenever I'm with my friends at the mall, just wherever I am. Please, I'm scared, I will very much appreciate it if you do. To end this answer, well... I mean, you could run the thing on a virus checker. Although, what might be an innocuous yet insecure system API call might be flagged as a suspicious activity. Not that I am aware of anything of that sort in my application, but I think that that will suffice as an example. What are your intentions in making this application? TL;DR: I've been commissioned for this project. Otherwise, it's a hobby of mine. It is not driven by any ill intentions. You asked me, trust me. I have been commissioned by @HappyPurple(Discord, Mistilteinn#4793) , owner of Ultralight Manga Translation Group to make a downloader for a raws manga site provider called urasunday.com . My intentions however are still the same as it was months ago. However, I have a side goal in mind right now: to attain popularity in the animanga piracy scene, enough to get me enough freelancing work and earn money. Yes, that is it, really. I am in it for the money. Anyways, I would very much appreciate it if you could donate money or a little bit of your time to ths endeavour of mine, or commission me to do some work for you. Who are you? TL;DR: That's a creepy thing to ask dude, I'm a teenager. \\s Hello, I am whi_ne, short for whitespace_negative. 17 at the time of writing. I am a python and a web developer, albeit shitty at both of them. I also do some freelance work. Nice to meet ya! Yes, I use an alias; personal branding is dead. I also want to stay anonymous. However, my pics on multiple guys' DMs suggests otherwise. And yes, please do not dig up dirt on me, I will let you know everything there is to know about me.","title":"Faq"},{"location":"faq/#is-this-application-safe","text":"TL;DR: First of all, safe from what aspect, bruv? Considering that you are asking this, probably not.","title":"Is this application safe?"},{"location":"faq/#what-are-your-intentions-in-making-this-application","text":"TL;DR: I've been commissioned for this project. Otherwise, it's a hobby of mine. It is not driven by any ill intentions. You asked me, trust me. I have been commissioned by @HappyPurple(Discord, Mistilteinn#4793) , owner of Ultralight Manga Translation Group to make a downloader for a raws manga site provider called urasunday.com . My intentions however are still the same as it was months ago. However, I have a side goal in mind right now: to attain popularity in the animanga piracy scene, enough to get me enough freelancing work and earn money. Yes, that is it, really. I am in it for the money. Anyways, I would very much appreciate it if you could donate money or a little bit of your time to ths endeavour of mine, or commission me to do some work for you.","title":"What are your intentions in making this application?"},{"location":"faq/#who-are-you","text":"TL;DR: That's a creepy thing to ask dude, I'm a teenager. \\s Hello, I am whi_ne, short for whitespace_negative. 17 at the time of writing. I am a python and a web developer, albeit shitty at both of them. I also do some freelance work. Nice to meet ya! Yes, I use an alias; personal branding is dead. I also want to stay anonymous. However, my pics on multiple guys' DMs suggests otherwise. And yes, please do not dig up dirt on me, I will let you know everything there is to know about me.","title":"Who are you?"},{"location":"latest-bump/","text":"Latest Version Bump 0.0.0.0-rc.0 Pre-release identifier bump. Added -on / --overwrite_not , -op / --overwrite_prompt , and -opn / --overwrite_prompt_not flags for the dl subcommand. Changed Made the app log the log path even when loading, so that the user will know where to find the said file when it gets stuck while loading. .AppImage so that you can run the cli by appending the cli subcommand to the command for running the said AppImage. For example, ./ura.AppImage cli [flags] . Fixed overwrite settings not being followed (i.e. overwrite set to False, yet the chapter that is already downloaded is being overwritten). Once and for all, the fucking python imports, for fuck's sake. Improved documentation!","title":"Latest bump"},{"location":"latest-bump/#0000-rc0","text":"Pre-release identifier bump.","title":"0.0.0.0-rc.0"},{"location":"latest-bump/#added","text":"-on / --overwrite_not , -op / --overwrite_prompt , and -opn / --overwrite_prompt_not flags for the dl subcommand.","title":"Added"},{"location":"latest-bump/#changed","text":"Made the app log the log path even when loading, so that the user will know where to find the said file when it gets stuck while loading. .AppImage so that you can run the cli by appending the cli subcommand to the command for running the said AppImage. For example, ./ura.AppImage cli [flags] .","title":"Changed"},{"location":"latest-bump/#fixed","text":"overwrite settings not being followed (i.e. overwrite set to False, yet the chapter that is already downloaded is being overwritten). Once and for all, the fucking python imports, for fuck's sake. Improved documentation!","title":"Fixed"},{"location":"latest-commit/","text":"Latest Commit Summary Massive documentation overhaul! Changes Changed dev/scripts/sh/source.sh 's fmt function to only format the markdowns located under docs/ . Fixed .github/workflows/build.yml 's jobs.linux.steps[?name=='Build'].run script, as the shitty appimagetool.AppImage is exiting with code 1 even though there IS NO FUCKING ERROR! GAAAAAAAHH!","title":"Latest commit"},{"location":"latest-commit/#summary","text":"Massive documentation overhaul!","title":"Summary"},{"location":"latest-commit/#changes","text":"","title":"Changes"},{"location":"latest-commit/#changed","text":"dev/scripts/sh/source.sh 's fmt function to only format the markdowns located under docs/ .","title":"Changed"},{"location":"latest-commit/#fixed","text":".github/workflows/build.yml 's jobs.linux.steps[?name=='Build'].run script, as the shitty appimagetool.AppImage is exiting with code 1 even though there IS NO FUCKING ERROR! GAAAAAAAHH!","title":"Fixed"},{"location":"latest-release-notes/","text":"0.0.0.0-rc.0 Description Pre-release identifier bump. Added -on / --overwrite_not , -op / --overwrite_prompt , and -opn / --overwrite_prompt_not flags for the dl subcommand. Changed Made the app log the log path even when loading, so that the user will know where to find the said file when it gets stuck while loading. .AppImage so that you can run the cli by appending the cli subcommand to the command for running the said AppImage. For example, ./ura.AppImage cli [flags] . Fixed overwrite settings not being followed (i.e. overwrite set to False, yet the chapter that is already downloaded is being overwritten). Once and for all, the fucking python imports, for fuck's sake. Improved documentation!","title":"Latest release notes"},{"location":"latest-release-notes/#description","text":"Pre-release identifier bump.","title":"Description"},{"location":"latest-release-notes/#added","text":"-on / --overwrite_not , -op / --overwrite_prompt , and -opn / --overwrite_prompt_not flags for the dl subcommand.","title":"Added"},{"location":"latest-release-notes/#changed","text":"Made the app log the log path even when loading, so that the user will know where to find the said file when it gets stuck while loading. .AppImage so that you can run the cli by appending the cli subcommand to the command for running the said AppImage. For example, ./ura.AppImage cli [flags] .","title":"Changed"},{"location":"latest-release-notes/#fixed","text":"overwrite settings not being followed (i.e. overwrite set to False, yet the chapter that is already downloaded is being overwritten). Once and for all, the fucking python imports, for fuck's sake. Improved documentation!","title":"Fixed"},{"location":"license/","text":"MIT LICENSE Copyright for portions of project ura are held by [whi_ne, Github account whinee owner, 2022] as part of project hyaku , by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL , by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL , and by [whi_ne, Github account whinee owner, 2022] as part of project snippets.py . All other copyright for project ura are held by [Github Account whinee Owner, 2022]. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"notes-to-self/","text":"Notes to Self Look, whi_ne, I have written this for you. Please, do I humbly plead you, do not ever forgot to read this before pushing changes to Github. Versioning System Look, you have made your own versioning system based off semver 2.0.0. Use it properly. Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. If in doubt, please DO visit semver.org . Version Bump Guides ANY change in the user interface/experience SHALL induce a user version bump. ANY change in the schema shall induce a dev version bump. ANY change in the documentation SHALL NOT induce any version bump. flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0 Changelog As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Mind the human as you do with the robot. Format the changelog properly. Example format: ## 69.4.2.0 (minor bump) Sprinkle a description here. ### Added - I added a cool feature. ### Deprecated - This feature will be depracated 'cuz I can't maintain it anymore. ### Security - Fixed stuff where the anilist token is leaked to everyone using this app. Documentation The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code.","title":"Notes to self"},{"location":"notes-to-self/#versioning-system","text":"Look, you have made your own versioning system based off semver 2.0.0. Use it properly. Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. If in doubt, please DO visit semver.org .","title":"Versioning System"},{"location":"notes-to-self/#version-bump-guides","text":"ANY change in the user interface/experience SHALL induce a user version bump. ANY change in the schema shall induce a dev version bump. ANY change in the documentation SHALL NOT induce any version bump. flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0","title":"Version Bump Guides"},{"location":"notes-to-self/#changelog","text":"As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Mind the human as you do with the robot. Format the changelog properly. Example format: ## 69.4.2.0 (minor bump) Sprinkle a description here. ### Added - I added a cool feature. ### Deprecated - This feature will be depracated 'cuz I can't maintain it anymore. ### Security - Fixed stuff where the anilist token is leaked to everyone using this app.","title":"Changelog"},{"location":"notes-to-self/#documentation","text":"The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code.","title":"Documentation"},{"location":"docs/0/0/","text":"dev/raw_docs/docs How to configure the program, and how it works Structure of the program Further documentation","title":"Index"},{"location":"docs/0/0/config/","text":"Config Configurations download_dir : str Directory to download the chapter at. overwrite : bool Defaults to True. Determines if the program overwrites the chapter if it is already downloaded. overwrite_prompt : bool Determines if the program prompts the user to overwrite the chapter if it is already downloaded. Config File Config File Lookup Order of Precedence (CFLOP) Hyaku is a cross-platform project, which means that it could be ran in different OS. There is however a lack of unity in the standardization on the location of config files in this OSes. And such, I have devised a precedence order for Hyaku's config file in different platforms. The following are the CFLOP for different OSes: flowchart TD A([CFLOP]) --> L[--config argument] L --> B{OS?} B --> |*nix| C[./ura.yml] subgraph <br> C --> D{\"XDG<br>CONFIG<br>HOME<br>(XCH)?\"} D --> |true| E[\"${XCH}/ura/config.yml\"] --> F D --> |false| F[\"~/.config/ura/config.yml\"] F --> G[\"~/.ura\"] end B --> |Windows| J[.\\ura.yml] subgraph <br><br> J --> K[\"${boot drive}:\\\\<br>Users\\${username}\\<br>AppData\\Roaming\\ura\\<br>config.yml\"] end","title":"Config"},{"location":"docs/0/0/config/#configurations","text":"","title":"Configurations"},{"location":"docs/0/0/config/#download_dir-str","text":"Directory to download the chapter at.","title":"download_dir: str"},{"location":"docs/0/0/config/#overwrite-bool","text":"Defaults to True. Determines if the program overwrites the chapter if it is already downloaded.","title":"overwrite: bool"},{"location":"docs/0/0/config/#overwrite_prompt-bool","text":"Determines if the program prompts the user to overwrite the chapter if it is already downloaded.","title":"overwrite_prompt: bool"},{"location":"docs/0/0/config/#config-file","text":"","title":"Config File"},{"location":"docs/0/0/config/#config-file-lookup-order-of-precedence-cflop","text":"Hyaku is a cross-platform project, which means that it could be ran in different OS. There is however a lack of unity in the standardization on the location of config files in this OSes. And such, I have devised a precedence order for Hyaku's config file in different platforms. The following are the CFLOP for different OSes: flowchart TD A([CFLOP]) --> L[--config argument] L --> B{OS?} B --> |*nix| C[./ura.yml] subgraph <br> C --> D{\"XDG<br>CONFIG<br>HOME<br>(XCH)?\"} D --> |true| E[\"${XCH}/ura/config.yml\"] --> F D --> |false| F[\"~/.config/ura/config.yml\"] F --> G[\"~/.ura\"] end B --> |Windows| J[.\\ura.yml] subgraph <br><br> J --> K[\"${boot drive}:\\\\<br>Users\\${username}\\<br>AppData\\Roaming\\ura\\<br>config.yml\"] end","title":"Config File Lookup Order of Precedence (CFLOP)"},{"location":"docs/0/0/structure/","text":"ura's Structure ura is a very basic application, yet it grew to a large size. As a one-man army, it is necessary for me to write this, as to not get lost in this chaos that I have created. I, however, procrastinated in writing this, and thus, is completely empty at the moment.","title":"Structure"},{"location":"docs/0/0/api/","text":"ura Sub-modules ura.gui ura.src","title":"**[ura](index.md)**"},{"location":"docs/0/0/api/#ura","text":"","title":"ura"},{"location":"docs/0/0/api/#sub-modules","text":"ura.gui ura.src","title":"Sub-modules"},{"location":"docs/0/0/api/gui/","text":"ura . gui Functions connect ( sid , environ ) connect_error ( data ) disconnect ( sid ) exp_log ( sid , name : str , * msg ) \u2011 > None ifn ( * args , ** kwargs ) log ( name : str , * msg ) \u2011 > None Log message to console. Args: msg ( str ): Message to be logged. log_path_fn ( sid , data ) rbn ( func : Callable [[ Any ], bool ]) \u2011 > Callable [[ Any ], tuple [ bool , None ]] Return bool, None Args: func ( Callable[[Any], bool] ): Function to be wrapped. Returns: Callable[[Any], tuple[bool, None]] : Wrapped function. rta ( func : Callable [[ Any ], Any ]) \u2011 > Callable [[ Any ], tuple [ True , Any ]] Return True, Any Args: func (Callable[[Any], Any]): Function to be wrapped. Returns: Callable[[Any], tuple[True, Any]]: Wrapped function. rtn ( func : Callable [[ Any ], None ]) \u2011 > Callable [[ Any ], tuple [ True , None ]] Return True, None Args: func ( Callable[[Any], None] ): Function to be wrapped. Returns: Callable[[Any], tuple[True, None]] : Wrapped function. tex ( func : Callable [[ Any ], Any ]) \u2011 > Callable [[ Any ], tuple [ bool , Any ]] Try except wrapper Args: func (Callable[[Any], Any]): Function to be wrapped. Returns: Callable[[Any], Any]: Wrapped function. Classes Expose () Methods config ( * args , ** kwargs ) dl ( * args , ** kwargs ) info ( * args , ** kwargs ) write_config ( * args , ** kwargs )","title":"**[ura](index.md).[gui](gui.md)**"},{"location":"docs/0/0/api/gui/#uragui","text":"","title":"ura.gui"},{"location":"docs/0/0/api/gui/#functions","text":"","title":"Functions"},{"location":"docs/0/0/api/gui/#classes","text":"","title":"Classes"},{"location":"docs/0/0/api/src/","text":"ura . src Super-module ura Sub-modules ura.src.base ura.src.cd ura.src.cfg ura.src.cli ura.src.download ura.src.exceptions ura.src.globals ura.src.init ura.src.style ura.src.utils","title":"**[ura](index.md).[src](src.md)**"},{"location":"docs/0/0/api/src/#urasrc","text":"","title":"ura.src"},{"location":"docs/0/0/api/src/#super-module","text":"ura","title":"Super-module"},{"location":"docs/0/0/api/src/#sub-modules","text":"ura.src.base ura.src.cd ura.src.cfg ura.src.cli ura.src.download ura.src.exceptions ura.src.globals ura.src.init ura.src.style ura.src.utils","title":"Sub-modules"},{"location":"docs/0/0/api/src/base/","text":"ura . src . base Functions class_usi ( dict_usi : dict [ str , int ]) From the given key-value pairs of slug name and slug index, return a class with attributes for each slug, passed to url_slug_idx. Args: dict_usi (`dict[str, int]`): The dictionary to get the slug name-index pairs from. soup ( url : str , req : Type [ ura . src . base . req ] = ura . src . base . req , method : str = 'get' , ** kwargs : Dict [ str , Any ]) \u2011 > bs4 . BeautifulSoup Returns a soup from the given url. Args: url ( str ): URL to get the soup from. req ( Type[req] , optional): Object to call the methods from. Defaults to req. Returns: BeautifulSoup : the soup urel_fn ( url : str ) \u2011 > str Turn an absolute URL to a relative one. If the given URL is already a relative one, a URL object from the url will be returned. Args: url ( str ): The URL to turn into a relative one. Returns: str : The relative URL. url_slug_idx ( idx : int ) \u2011 > Callable [[ str ], str ] From an index, get the slug from a URL whether it is a relative or an absolute URL. Args: idx ( int ): The index of the slug from. Returns: Callable[[str], str] : Method to input the URL to and get the slug.","title":"**[ura](../index.md).[src](../src.md).[base](base.md)**"},{"location":"docs/0/0/api/src/base/#urasrcbase","text":"","title":"ura.src.base"},{"location":"docs/0/0/api/src/base/#functions","text":"","title":"Functions"},{"location":"docs/0/0/api/src/cd/","text":"ura . src . cd Classes CDInsTypeError ( og_path : str , idx : int , type : type ) Inappropriate argument type. Ancestors (in MRO) builtins.TypeError builtins.Exception builtins.BaseException CDKeyError ( message : str ) Mapping key not found. Ancestors (in MRO) builtins.KeyError builtins.LookupError builtins.Exception builtins.BaseException CDTypeError ( message : str ) Inappropriate argument type. Ancestors (in MRO) builtins.TypeError builtins.Exception builtins.BaseException CustomDict ( * args , ** kwargs ) Custom dictionary. Ancestors (in MRO) builtins.dict Methods dir ( self , path : str , de : Any = None ) \u2011 > Any insert ( self , path : str , value : Any ) \u2011 > None Insert a value into a dictionary or list. Args: path ( str ): The path to the value. value ( Any ): The value to insert. modify ( self , path : str , value : Any ) \u2011 > None Insert a value into a dictionary or list. Args: path ( str ): The path to the value. value ( Any ): The value to insert.","title":"**[ura](../index.md).[src](../src.md).[cd](cd.md)**"},{"location":"docs/0/0/api/src/cd/#urasrccd","text":"","title":"ura.src.cd"},{"location":"docs/0/0/api/src/cd/#classes","text":"","title":"Classes"},{"location":"docs/0/0/api/src/cfg/","text":"ura . src . cfg Functions dcfg ( value : dict , ext : str ) \u2011 > str Dump the given value to a string with the given extension. Args: value ( dict ): Value to dump to a string. ext ( str ): Extension to dump the value to. Returns: str : The dumped value. de_rcfg () de_wcfg ( value : dict [ typing . Any , typing . Any ] | list [ typing . Any ]) pcfg ( d : str , type : str ) \u2011 > ura . src . cd . CustomDict Parse the given string as the given type. Args: d ( str ): String to parse. type ( str ): Type to parse the string as. Returns: CustomDict : The parsed string. rcfg ( file : str ) \u2011 > ura . src . cd . CustomDict Read the contents of a file with the given file name. Args: file ( str ): File name of the file to read the contents of. Returns: CustomDict : The contents of the file. wcfg ( file : str , value : dict [ typing . Any , typing . Any ] | list [ typing . Any ]) \u2011 > None Write the given value to a file with the given file name. Args: file ( str ): File name of the file to write the value to. value ( dict[Any, Any] | list[Any]) : Value to write to the file. Classes ExtensionNotSupported ( ext : str ) Method or function hasn't been implemented yet. Ancestors (in MRO) builtins.NotImplementedError builtins.RuntimeError builtins.Exception builtins.BaseException","title":"**[ura](../index.md).[src](../src.md).[cfg](cfg.md)**"},{"location":"docs/0/0/api/src/cfg/#urasrccfg","text":"","title":"ura.src.cfg"},{"location":"docs/0/0/api/src/cfg/#functions","text":"","title":"Functions"},{"location":"docs/0/0/api/src/cfg/#classes","text":"","title":"Classes"},{"location":"docs/0/0/api/src/cli/","text":"ura . src . cli Functions command ( group ) \u2011 > Callable [[ Callable [[ Any ], Any ]], Callable [[ Any ], Any ]] Wrapper for click commands. Args: group ( click.group ): Command group of the command to be under. Returns: Callable[[Callable[[Any], Any]], Callable[[Any], Any]] Classes cao ( group , cmd : str ) Returns wrappers for a click command evaluated from the given arguments. Class variables arguments cmd group Methods a ( self , f : Callable [[ Any ], Any ]) \u2011 > Callable [[ Callable [[ Any ], Any ]], Callable [[ Any ], Any ]] The arguments wrapper. Args: f ( Callable[[Any], Any] ): The command function to be decorated. Returns: Callable[[Callable[[Any], Any]], Callable[[Any], Any]] c ( self , f : Callable [[ Any ], Any ]) \u2011 > Callable [[ Callable [[ Any ], Any ]], Callable [[ Any ], Any ]] The command wrapper. Args: f ( Callable[[Any], Any] ): The command function to be decorated. Returns: Callable[[Callable[[Any], Any]], Callable[[Any], Any]] o ( self , f : Callable [[ Any ], Any ]) \u2011 > Callable [[ Callable [[ Any ], Any ]], Callable [[ Any ], Any ]] The options wrapper. My God in heaven, I'm agnostic, but please save me from all evil. Amen. Args: f ( Callable[[Any], Any] ): The command function to be decorated. Returns: Callable[[Callable[[Any], Any]], Callable[[Any], Any]]","title":"**[ura](../index.md).[src](../src.md).[cli](cli.md)**"},{"location":"docs/0/0/api/src/cli/#urasrccli","text":"","title":"ura.src.cli"},{"location":"docs/0/0/api/src/cli/#functions","text":"","title":"Functions"},{"location":"docs/0/0/api/src/cli/#classes","text":"","title":"Classes"},{"location":"docs/0/0/api/src/download/","text":"ura . src . download Functions get_extension ( filename : str ) \u2011 > str Get the file extension of a file from the given filename. Args: filename ( str ): The filename to get the file extension from. Returns: str : The file extension from the given filename. get_stg ( path : str , de : Any = None ) sanitize_filename ( filename : str ) \u2011 > str Sanitize the given filename. Args: filename ( str ): The filename to be sanitized. Returns: str : Sanitized filename. Classes Downloader ( directory : str = None , overwrite : bool = None , ** kwargs : Dict [ str , Any ]) Methods dlch ( self , url : str ) dlf ( self , file : List [ str ]) Individual image downloader. Args: file ( str ): List containing the filename and the url of the file.","title":"**[ura](../index.md).[src](../src.md).[download](download.md)**"},{"location":"docs/0/0/api/src/download/#urasrcdownload","text":"","title":"ura.src.download"},{"location":"docs/0/0/api/src/download/#functions","text":"","title":"Functions"},{"location":"docs/0/0/api/src/download/#classes","text":"","title":"Classes"},{"location":"docs/0/0/api/src/exceptions/","text":"ura . src . exceptions Functions c_exc ( cls : Exception | object ) \u2011 > Exception Decorator to raise a custom exception. This function gives the class an init function that raises the exception. If the class does not inherit from any Exception, it will be automatically inherit from Exception. This function also wraps the Exception with c_exc_str method, for adding the __str__ method. Args: cls ( BaseException | Object ): The exception to modify. Returns: BaseException : The exception to raise. c_exc_str ( cls : Exception ) \u2011 > Exception Decorator to add the str method to an exception. Args: cls ( BaseException ): The exception to add the str method to. Returns: BaseException : The exception to raise.","title":"**[ura](../index.md).[src](../src.md).[exceptions](exceptions.md)**"},{"location":"docs/0/0/api/src/exceptions/#urasrcexceptions","text":"","title":"ura.src.exceptions"},{"location":"docs/0/0/api/src/exceptions/#functions","text":"","title":"Functions"},{"location":"docs/0/0/api/src/globals/","text":"ura . src . globals Variables CFLOP flowchart LR A([Config]) --> B[Grab CFLOP] B --> C{Last item} C --> |false| D{File exists?} D --> |true| E([Read config file]) D --> |false| C C --> |true| F{OS?} F --> |Windows| G[Initialize config file<br>at first lookup path] --> E F --> |*nix| H{.AppImage?} H --> |true| I[Initialize config file<br>at second lookup path] --> E H --> |false| G Functions init ( idx : int ) \u2011 > None","title":"**[ura](../index.md).[src](../src.md).[globals](globals.md)**"},{"location":"docs/0/0/api/src/globals/#urasrcglobals","text":"","title":"ura.src.globals"},{"location":"docs/0/0/api/src/globals/#variables","text":"CFLOP flowchart LR A([Config]) --> B[Grab CFLOP] B --> C{Last item} C --> |false| D{File exists?} D --> |true| E([Read config file]) D --> |false| C C --> |true| F{OS?} F --> |Windows| G[Initialize config file<br>at first lookup path] --> E F --> |*nix| H{.AppImage?} H --> |true| I[Initialize config file<br>at second lookup path] --> E H --> |false| G","title":"Variables"},{"location":"docs/0/0/api/src/globals/#functions","text":"","title":"Functions"},{"location":"docs/0/0/api/src/init/","text":"ura . src . init","title":"**[ura](../index.md).[src](../src.md).[init](init.md)**"},{"location":"docs/0/0/api/src/init/#urasrcinit","text":"","title":"ura.src.init"},{"location":"docs/0/0/api/src/style/","text":"ura . src . style Functions pp ( t : Any ) Classes C () Class variables h0 h1 h2 s0 s1 s2 S () Class variables p0 p1 t0 t1 t2 t_critical t_error t_warning ct () Methods group ( * ls : list [ typing . Any ]) \u2011 > rich . console . Group table ( cols : list [ str ], rows : list [ list [ str ]])","title":"**[ura](../index.md).[src](../src.md).[style](style.md)**"},{"location":"docs/0/0/api/src/style/#urasrcstyle","text":"","title":"ura.src.style"},{"location":"docs/0/0/api/src/style/#functions","text":"","title":"Functions"},{"location":"docs/0/0/api/src/style/#classes","text":"","title":"Classes"},{"location":"docs/0/0/api/src/utils/","text":"ura . src . utils Functions dnrp ( file : str , n : int = 1 ) \u2011 > str Get the directory component of a pathname by n times recursively then return it. Args: file ( str ): File to get the directory of. n ( int , optional): Number of times to get up the directory???? Defaults to 1. Returns: str : The directory component got recursively by n times from the given pathname dpop ( d : dict [ typing . Any , typing . Any ], pop : list [ int | tuple [ str | int | tuple ] | str ], de : Any = None ) \u2011 > Any Iterate through the preferred order of precedence ( pop ) and see if the value exists in the dictionary. If it does, return it. If not, return de . Args: d ( Dict[Any, Any] ): Dictionary to retrieve the value from. pop ( list[int | tuple[str | int | tuple] | str] ): List of keys to iterate through. de ( Any , optional): Default object to be returned. Defaults to None. Returns: Any : Retrieved value. dt ( dt : str , format : str ) \u2011 > str Remove timezone from datetime and format it to ISO 8601 format. Args: dt ( str ): Unformatted datetime string to be formatted to ISO 8601 format format ( str ): The initial format of the datetime string Returns: str : Formatted datetime string dt_ts ( ts : str ) \u2011 > str Convert the given unix timestamp to ISO 8601 format. Args: ts (str): unix timestamp to be converted to ISO 8601 format Returns: str: Formatted datetime string inmd ( p : str , ls : list [ str ] = None ) \u2011 > str \"If Not path.isdir , Make Directories\" Args: p ( str ): The path to be created, if it does not exist. Returns: str : The path given. ivnd ( var : Any , de : Any ) \u2011 > Any If Var is None, return Default else var. Args: var ( Any ): Variable to check if it is None. de ( Any ): Default value to return if var is None. Returns: Any : var if var is not None else de. le ( expr : str ) \u2011 > Any repl ( s : str , repl_dict : dict [ str , list [ str ]]) \u2011 > str run ( s : str ) sanitize_text ( s : str )","title":"**[ura](../index.md).[src](../src.md).[utils](utils.md)**"},{"location":"docs/0/0/api/src/utils/#urasrcutils","text":"","title":"ura.src.utils"},{"location":"docs/0/0/api/src/utils/#functions","text":"","title":"Functions"}]}