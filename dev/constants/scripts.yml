variables:
  global:
    python_ver: '3.10'
    python_ver_nd: '310'
  local: {}

matrix:
  bits:
    - 86
    - 64

scripts:
  package_json:
    path: package.json
    og_ext: yml
    ext: json
    contents: |-
      name: ${project_name}
      version: ${hver}
      description: ${desc}
      main: tmp/gui/main.js
      scripts:
        start: NODE_ENV=development electron --trace-warnings ${project_name}/gui/main.js
      repository: https://github.com/${organization}/${repo_name}
      keywords:
        - Electron
      author: ${user}
      license: MIT
      devDependencies:
        electron: "^19.0.3"
        electron-builder: "^23.0.3"
      dependencies:
        python-shell: "^3.0.0"
        socket.io-client: "^4.5.0"

  apprun:
    path: dev/constants/tpl/scripts/AppRun
    contents: |-
      #!/bin/bash
      # shellcheck disable=SC1087,SC1091,SC2001,SC2025,SC2045,SC2059,SC2119,SC2120,SC2162,SC2148,SC2154,SC2155,SC2195,SC2210

      set -e

      if [ -n "$DEBUG" ]; then
          env
          set -x
      fi

      THIS="$0"

      if [ -z "$APPDIR" ]; then
          path="$(dirname "$(readlink -f "${THIS}")")"
          while [[ "$path" != "" && ! -e "$path" ]]; do
              path=${path%/*}
          done
          APPDIR="$path"
      fi

      if [ -z "$APPIMAGE" ]; then
          APPIMAGE="$APPDIR/AppRun"
      fi

      arg0=$(basename "$0" .sh)
      blnk=$(echo "$arg0" | sed "s/./ /g")

      usage_info() {
          echo "Usage: $arg0 [-g|--gui] \\"
          echo "       $blnk [-h|--help] \\"
      }

      help() {
          usage_info
          echo
          echo "  [-g|--gui]  -- Run GUI"
          echo "  [-h|--help] -- Print this help message and exit"
      }

      gui() {
          exec "$APPDIR/${project_name}"
          exit 0
      }

      cli() {
          "$APPDIR/resources/app/tmp/python/opt/python3.10/bin/python3.10" "$APPDIR/resources/app/tmp/src" $@
      }

      if [ $# -eq 0 ]; then
          gui
      else
          case "$1" in
          gui) gui ;;
          cli)
              shift
              cli $@
              ;;
          help)
              help
              exit 0
              ;;
          *)
              cli $@
              exit 1
              ;;
          esac
      fi

  build_yml:
    path: .github/workflows/build.yml
    contents: |-
      name: Build

      on:
        push:
          paths:
            - version.yml
        workflow_dispatch:

      jobs:
        release:
          name: release
          runs-on: ubuntu-latest
          outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
          steps:
            - name: Checkout
              uses: actions/checkout@master
            - name: Python${python_ver}
              uses: actions/setup-python@v1
              with:
                python-version: "${python_ver}"
            - name: Build markdown
              run: |-
                python "dev/scripts/py/rn_md.py"
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${ver}
                release_name: ${project_name} release v${ver}
                body_path: .md
                draft: false
                prerelease: ${prerel}
        linux:
          name: Linux
          needs: release
          runs-on: ubuntu-latest
          steps:
            - name: Checkout
              uses: actions/checkout@master
            - name: Python${python_ver}
              uses: actions/setup-python@v1
              with:
                python-version: "${python_ver}"
            - name: Build
              run: |-
                NODE_ENV=production &&
                (
                  yarn &
                  python -m pip install -r dev/constants/req.txt &
                  ( [ "$NODE_ENV" = "development" ] && rm -rf dist/ squashfs-root/ tmp/ ura.AppImage ) &
                  wait
                ) &&
                mkdir tmp/ &&
                (
                    cp -r ${project_name}/** tmp/ &
                    wget -O ./tmp/python.AppImage "$(wget -qSO - "https://api.github.com/repos/niess/python-appimage/releases/tags/python${python_ver}" 2>/dev/null | grep -E "browser_download_url.*x86_64" | cut -d '"' -f4 | tail -1)" >/dev/null &
                    wget -O ./tmp/tool.AppImage https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage >/dev/null &
                    python -c "from dev.scripts.py.eb import main;main('linux','tmp/cfg.yml')" &
                    wait
                ) &&
                chmod +x ./tmp/tool.AppImage &&
                chmod +x ./tmp/python.AppImage &&
                ./tmp/python.AppImage --appimage-extract >/dev/null &&
                mv squashfs-root tmp/python/ &&
                (
                    rm -f ./tmp/python.AppImage &
                    python -c "import re
                F='tmp/gui/main.js'
                with open(F,'r') as f:i=f.read()
                i=re.sub(r'const scriptPath.+',f'const scriptPath = path.join(__dirname, \\'../\\')',i)
                with open(F,'w') as f:f.write(re.sub(r'const pythonPath.+',f'const pythonPath = path.join(__dirname, \\'../python/opt/python${python_ver}/bin/python${python_ver}\\')',i))" &
                    ./tmp/python/usr/bin/pip3 install --upgrade pip --no-warn-script-location --no-cache-dir --disable-pip-version-check &
                    ./tmp/python/usr/bin/pip3 uninstall wheel -y --no-cache-dir --disable-pip-version-check &
                    wait
                ) &&
                ./tmp/python/usr/bin/pip3 install --no-warn-script-location --no-cache-dir --disable-pip-version-check -I -r requirements.txt &&
                yarn electron-builder --config "tmp/cfg.yml" --publish never &&
                ./dist/${project_name}.AppImage --appimage-extract >/dev/null &&
                cp dev/constants/tpl/scripts/AppRun squashfs-root/AppRun &&
                (
                  ./tmp/tool.AppImage squashfs-root ./dist/${project_name}.AppImage
                  exit 0
                ) &&
                ( [ "$NODE_ENV" = "development" ] && cp ./dist/${project_name}.AppImage ./${project_name}.AppImage && rm -rf dist/ squashfs-root/ tmp/ || exit 0 ) &&
                exit 0
            - name: Upload ${project_name}.AppImage
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{needs.release.outputs.upload_url}}
                asset_path: ./dist/${project_name}.AppImage
                asset_name: ${project_name}.AppImage
                asset_content_type: application/octet
            - name: Upload ${project_name}-compressed.AppImage
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{needs.release.outputs.upload_url}}
                asset_path: ./dist/${project_name}-compressed.AppImage
                asset_name: ${project_name}-compressed.AppImage
                asset_content_type: application/octet
        win:
          name: Windows
          needs: release
          runs-on: windows-latest
          steps:
            - name: Checkout
              uses: actions/checkout@master
            - name: Python${python_ver}
              uses: actions/setup-python@v1
              with:
                python-version: "${python_ver}"
            - name: Build
              run: |-
                # Remove-Item dist\ -Recurse -Force
                # Remove-Item tmp\ -Recurse -Force
                python -m pip install -r dev\constants\req.txt
                yarn

                New-Item -itemtype Directory -path 'tmp\python'
                Copy-Item -Path '${project_name}\**' -Destination 'tmp\' -recurse -Force
                Set-Location tmp\
                Invoke-WebRequest 'https://bootstrap.pypa.io/get-pip.py' -o get-pip.py
                Set-Location python
                Invoke-WebRequest 'https://www.python.org/ftp/python/${python_ver}.0/python-${python_ver}.0-embed-amd64.zip' -o python.zip
                tar -xf python.zip
                Remove-Item python.zip
                Remove-Item python${python_ver_nd}._pth
                Set-Location ..
                .\python\python get-pip.py
                Remove-Item get-pip.py
                Set-Location ..

                .\tmp\python\python -m pip uninstall wheel -y --no-cache-dir --disable-pip-version-check
                .\tmp\python\python -m pip install --upgrade pip --no-warn-script-location --no-cache-dir --disable-pip-version-check
                .\tmp\python\python -m pip install --no-warn-script-location --no-cache-dir --disable-pip-version-check -I -r requirements.txt

                python -c "from dev.scripts.py.eb import main;main('win','tmp\cfg.yml')"
                python -c "import re;F='tmp\\gui\\main.js'
                with open(F,'r') as f:i=f.read()
                i=re.sub(r'const scriptPath.+',f'const scriptPath = path.join(__dirname, \'..\\\\\\\\\')',i,count=1)
                with open(F,'w') as f:f.write(re.sub(r'const pythonPath.+',f'const pythonPath = path.join(__dirname, \'..\\\\\\\\python\\\\\\\\python\')',i))"
                yarn electron-builder --config "tmp\cfg.yml" --publish never
            - name: Upload ${project_name}.exe
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{needs.release.outputs.upload_url}}
                asset_path: ./dist/${project_name}.exe
                asset_name: ${project_name}.exe
                asset_content_type: application/octet
