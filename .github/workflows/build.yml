name: Build

on:
  push:
    paths:
      - version
  workflow_dispatch:

jobs:
  pypi:
    name: PyPI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Python3.10
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"
      - name: Build
        run: |-
          python3 -m pip install --upgrade pip
          python -m pip install setuptools wheel
          python setup.py sdist
      - name: Publish
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
  release:
    name: release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Python3.10
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 0.0.0.0-alpha.3
          release_name: ura release v0.0.0.0-alpha.3
          draft: false
          prerelease: True
  linux:
    name: Linux
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Python3.10
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"
      - name: Install Prerequisites
        run: |-
          sudo apt install appstream
      - name: Build
        env:
          python_ver: "3.10"
        run: |-
          wget -O python.AppImage `wget -qSO - "https://api.github.com/repos/niess/python-appimage/releases/tags/python3.10" 2>&1 | grep -E "browser_download_url.*x86_64"| cut -d '"' -f4 | tail -1`
          chmod +x python.AppImage
          wget -O tool.AppImage https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x ./tool.AppImage
          ./python.AppImage --appimage-extract > /dev/null 2>&1
          rm -rf python.AppImage
          mv squashfs-root ura-linux-x86_64
          chmod +x ./ura-linux-x86_64/usr/bin/pip3
          ./ura-linux-x86_64/usr/bin/pip3 install --upgrade pip
          ./ura-linux-x86_64/usr/bin/pip3 install git+https://github.com/hyaku-dl/urasunday --no-warn-script-location
          rm -rf ./ura-linux-x86_64/python3.10.0.desktop
          echo "#!/usr/bin/env xdg-open
          [Desktop Entry]
          Type=Application
          Name=ura
          Exec=ura
          Comment=A Basic Urasunday Scraper
          Categories=AudioVideo;
          Icon=logo
          Terminal=true" > ./ura-linux-x86_64/ura.desktop
          echo '#! /bin/sh
          "exec" "$(dirname $(readlink -f ${0}))/usr/bin/python3.10" "$0" "$@"
          # -*- coding: utf-8 -*-
          import re
          import sys
          from ura.cli import cli
          if __name__ == "__main__":
              sys.argv[0] = re.sub("r(-script\.pyw|\.exe)?$", "", sys.argv[0])
              sys.exit(cli())' > ./ura-linux-x86_64/AppRun
          rm -rf ./ura-linux-x86_64/python.png
          rm -rf "./ura-linux-x86_64/python"$python_ver_minor".desktop"
          wget -O ./ura-linux-x86_64/logo.png https://github.com/hyaku-dl/urasunday/raw/main/docs/assets/images/icons/logo.png
          chmod +x ./ura-linux-x86_64/ura.desktop
          rm -rf build/
          ./tool.AppImage ura-linux-x86_64
          rm -rf tool.AppImage
          rm -rf ura-linux-x86_64
      - name: Upload AppImage
        id: upload-appimage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: ./ura-x86_64.AppImage
          asset_name: ura-linux-x86_64.AppImage
          asset_content_type: application/octet
  win:
    name: Windows
    needs: release
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - name: winx64
            embedable: https://www.python.org/ftp/python/3.10.0/python-3.10.0-embed-amd64.zip
          - name: winx86
            embedable: https://www.python.org/ftp/python/3.10.0/python-3.10.0-embed-win32.zip

    steps:
      - name: Build ura-${{ matrix.name }}.zip
        run: |-
          git clone https://github.com/hyaku-dl/urasunday ura
          cd ura
          curl -sSL ${{ matrix.embedable }} -o python.zip
          curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          tar -xf python.zip
          del python310._pth
          curl -sSL https://ura.hyaku.download/scripts/python310._pth -o python310._pth
          curl -sSL https://ura.hyaku.download/scripts/ura.bat -o ura.bat
          .\python get-pip.py
          .\python -m pip install .
          del python.zip
          del get-pip.py
          cd ..
          tar -a -c -f ura.zip ura
      - name: Upload
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./ura.zip
          asset_name: ura-${{ matrix.name }}.zip
          asset_content_type: application/zip