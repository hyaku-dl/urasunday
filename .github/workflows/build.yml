name: Build

on:
  push:
    paths:
      - version.yml
  workflow_dispatch:

jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 0.0.0.0-alpha.5
          release_name: ura release v0.0.0.0-alpha.5
          draft: false
          prerelease: True
  linux:
    name: Linux
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Python3.10
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"
      - name: Build
        env:
          python_ver: "3.10"
        run: |-
          (
            yarn &
            python -m pip install -r dev/constants/req.txt &
            rm -rf dist/ tmp/ &
            wait
          ) &&
          mkdir tmp/ &&
          (
              cp -r ura/** tmp/ &
              wget -O tmp/python.AppImage "$(wget -qSO - "https://api.github.com/repos/niess/python-appimage/releases/tags/python3.10" 2>/dev/null | grep -E "browser_download_url.*x86_64" | cut -d '"' -f4 | tail -1)" >/dev/null &
              python -c "from dev.scripts.py.eb import main;main('linux','tmp/cfg.yml')" &
              wait
          ) &&
          chmod +x ./tmp/python.AppImage &&
          ./tmp/python.AppImage --appimage-extract >/dev/null &&
          mv squashfs-root tmp/python/ &&
          (
              rm -f ./tmp/python.AppImage &
              python -c "import re
          F='tmp/gui/main.js'
          with open(F,'r') as f:i=f.read()
          i=re.sub(r'const scriptPath.+',f'const scriptPath = path.join(__dirname, \'../\')',i)
          with open(F,'w') as f:f.write(re.sub(r'const pythonPath.+',f'const pythonPath = path.join(__dirname, \'../python/opt/python3.10/bin/python3.10\')',i))" &
              ./tmp/python/usr/bin/pip3 install --upgrade pip --no-warn-script-location --no-cache-dir --disable-pip-version-check &
              ./tmp/python/usr/bin/pip3 uninstall wheel -y --no-cache-dir --disable-pip-version-check &
              wait
          ) &&
          ./tmp/python/usr/bin/pip3 install --no-warn-script-location --no-cache-dir --disable-pip-version-check -r requirements.txt &&
          yarn electron-builder --config "tmp/cfg.yml"
      - name: Upload AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: ./dist/ura.AppImage
          asset_name: ura.AppImage
          asset_content_type: application/octet
      - name: Upload latest-linux.yml
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: ./dist/latest-linux.yml
          asset_name: latest-linux.yml
          asset_content_type: application/octet